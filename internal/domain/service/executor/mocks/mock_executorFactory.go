// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/executor/executorFactory.go

// Package mockExecutor is a generated GoMock package.
package mockExecutor

import (
	enum "contest/internal/domain/enum"
	"contest/internal/domain/service/executor"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExecutorFactory is a mock of ExecutorFactory interface.
type MockExecutorFactory struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorFactoryMockRecorder
}

// MockExecutorFactoryMockRecorder is the mock recorder for MockExecutorFactory.
type MockExecutorFactoryMockRecorder struct {
	mock *MockExecutorFactory
}

// NewMockExecutorFactory creates a new mock instance.
func NewMockExecutorFactory(ctrl *gomock.Controller) *MockExecutorFactory {
	mock := &MockExecutorFactory{ctrl: ctrl}
	mock.recorder = &MockExecutorFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutorFactory) EXPECT() *MockExecutorFactoryMockRecorder {
	return m.recorder
}

// NewExecutor mocks base method.
func (m *MockExecutorFactory) NewExecutor(code string, language enum.Language) (executor.Executor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewExecutor", code, language)
	ret0, _ := ret[0].(executor.Executor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewExecutor indicates an expected call of NewExecutor.
func (mr *MockExecutorFactoryMockRecorder) NewExecutor(code, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewExecutor", reflect.TypeOf((*MockExecutorFactory)(nil).NewExecutor), code, language)
}
