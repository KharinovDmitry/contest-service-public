// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/launch.go

// Package mockRepository is a generated GoMock package.
package mockRepository

import (
	model "contest/internal/domain/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLaunchRepository is a mock of LaunchRepository interface.
type MockLaunchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLaunchRepositoryMockRecorder
}

// MockLaunchRepositoryMockRecorder is the mock recorder for MockLaunchRepository.
type MockLaunchRepositoryMockRecorder struct {
	mock *MockLaunchRepository
}

// NewMockLaunchRepository creates a new mock instance.
func NewMockLaunchRepository(ctrl *gomock.Controller) *MockLaunchRepository {
	mock := &MockLaunchRepository{ctrl: ctrl}
	mock.recorder = &MockLaunchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLaunchRepository) EXPECT() *MockLaunchRepositoryMockRecorder {
	return m.recorder
}

// AddLaunch mocks base method.
func (m *MockLaunchRepository) AddLaunch(ctx context.Context, launch model.Launch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLaunch", ctx, launch)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLaunch indicates an expected call of AddLaunch.
func (mr *MockLaunchRepositoryMockRecorder) AddLaunch(ctx, launch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLaunch", reflect.TypeOf((*MockLaunchRepository)(nil).AddLaunch), ctx, launch)
}

// GetLaunchesByUser mocks base method.
func (m *MockLaunchRepository) GetLaunchesByUser(ctx context.Context, userID int) ([]model.Launch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchesByUser", ctx, userID)
	ret0, _ := ret[0].([]model.Launch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchesByUser indicates an expected call of GetLaunchesByUser.
func (mr *MockLaunchRepositoryMockRecorder) GetLaunchesByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchesByUser", reflect.TypeOf((*MockLaunchRepository)(nil).GetLaunchesByUser), ctx, userID)
}

// GetLaunchesByUserAndContest mocks base method.
func (m *MockLaunchRepository) GetLaunchesByUserAndContest(ctx context.Context, userID, contestID int) ([]model.Launch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchesByUserAndContest", ctx, userID, contestID)
	ret0, _ := ret[0].([]model.Launch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchesByUserAndContest indicates an expected call of GetLaunchesByUserAndContest.
func (mr *MockLaunchRepositoryMockRecorder) GetLaunchesByUserAndContest(ctx, userID, contestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchesByUserAndContest", reflect.TypeOf((*MockLaunchRepository)(nil).GetLaunchesByUserAndContest), ctx, userID, contestID)
}

// GetSuccessLaunchesByUser mocks base method.
func (m *MockLaunchRepository) GetSuccessLaunchesByUser(ctx context.Context, userID int) ([]model.Launch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuccessLaunchesByUser", ctx, userID)
	ret0, _ := ret[0].([]model.Launch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuccessLaunchesByUser indicates an expected call of GetSuccessLaunchesByUser.
func (mr *MockLaunchRepositoryMockRecorder) GetSuccessLaunchesByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuccessLaunchesByUser", reflect.TypeOf((*MockLaunchRepository)(nil).GetSuccessLaunchesByUser), ctx, userID)
}
